//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace BungieNet.Api
{
	public interface ITokensClient
	{
		bool ClaimPartnerOffer(Tokens.PartnerOfferClaimRequest partnerOfferClaimRequest);
		Task<bool> ClaimPartnerOfferAsync(Tokens.PartnerOfferClaimRequest partnerOfferClaimRequest);

		bool ApplyMissingPartnerOffersWithoutClaim(int partnerApplicationId, long targetBnetMembershipId);
		Task<bool> ApplyMissingPartnerOffersWithoutClaimAsync(int partnerApplicationId, long targetBnetMembershipId);

		Tokens.PartnerOfferSkuHistoryResponse[] GetPartnerOfferSkuHistory(int partnerApplicationId, long targetBnetMembershipId);
		Task<Tokens.PartnerOfferSkuHistoryResponse[]> GetPartnerOfferSkuHistoryAsync(int partnerApplicationId, long targetBnetMembershipId);
	}

	partial interface IBungieClient
	{
		ITokensClient Tokens { get; }
	}

	partial class BungieClient : ITokensClient
	{
		public ITokensClient Tokens => this;


		bool ITokensClient.ClaimPartnerOffer(Tokens.PartnerOfferClaimRequest partnerOfferClaimRequest) => Tokens.ClaimPartnerOfferAsync(partnerOfferClaimRequest).GetAwaiter().GetResult();
		Task<bool> ITokensClient.ClaimPartnerOfferAsync(Tokens.PartnerOfferClaimRequest partnerOfferClaimRequest)
		{
			string[] pathSegments = new string[] { "Tokens", "Partner", "ClaimOffer" };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<Tokens.PartnerOfferClaimRequest, bool>(uri, partnerOfferClaimRequest);
		}

		bool ITokensClient.ApplyMissingPartnerOffersWithoutClaim(int partnerApplicationId, long targetBnetMembershipId) => Tokens.ApplyMissingPartnerOffersWithoutClaimAsync(partnerApplicationId, targetBnetMembershipId).GetAwaiter().GetResult();
		Task<bool> ITokensClient.ApplyMissingPartnerOffersWithoutClaimAsync(int partnerApplicationId, long targetBnetMembershipId)
		{
			string[] pathSegments = new string[] { "Tokens", "Partner", "ApplyMissingOffers", partnerApplicationId.ToString(), targetBnetMembershipId.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		Tokens.PartnerOfferSkuHistoryResponse[] ITokensClient.GetPartnerOfferSkuHistory(int partnerApplicationId, long targetBnetMembershipId) => Tokens.GetPartnerOfferSkuHistoryAsync(partnerApplicationId, targetBnetMembershipId).GetAwaiter().GetResult();
		Task<Tokens.PartnerOfferSkuHistoryResponse[]> ITokensClient.GetPartnerOfferSkuHistoryAsync(int partnerApplicationId, long targetBnetMembershipId)
		{
			string[] pathSegments = new string[] { "Tokens", "Partner", "History", partnerApplicationId.ToString(), targetBnetMembershipId.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityArrayAsync<Tokens.PartnerOfferSkuHistoryResponse>(uri);
		}
	}
}
