//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace BungieNet.Api
{
	public interface ICommunityContentClient
	{
		Forum.PostSearchResponse GetCommunityContent(Forum.CommunityContentSortMode sort, Forum.ForumTopicsCategoryFiltersEnum mediaFilter, int page);
		Task<Forum.PostSearchResponse> GetCommunityContentAsync(Forum.CommunityContentSortMode sort, Forum.ForumTopicsCategoryFiltersEnum mediaFilter, int page);

		SearchResultOfCommunityLiveStatus GetCommunityLiveStatuses(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, uint modeHash, string streamLocale);
		Task<SearchResultOfCommunityLiveStatus> GetCommunityLiveStatusesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, uint modeHash, string streamLocale);

		SearchResultOfCommunityLiveStatus GetCommunityLiveStatusesForClanmates(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page);
		Task<SearchResultOfCommunityLiveStatus> GetCommunityLiveStatusesForClanmatesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page);

		SearchResultOfCommunityLiveStatus GetCommunityLiveStatusesForFriends(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page);
		Task<SearchResultOfCommunityLiveStatus> GetCommunityLiveStatusesForFriendsAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page);

		SearchResultOfCommunityLiveStatus GetFeaturedCommunityLiveStatuses(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, string streamLocale);
		Task<SearchResultOfCommunityLiveStatus> GetFeaturedCommunityLiveStatusesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, string streamLocale);

		Community.CommunityLiveStatus GetStreamingStatusForMember(Partnerships.PartnershipType partnershipType, BungieMembershipType membershipType, long membershipId);
		Task<Community.CommunityLiveStatus> GetStreamingStatusForMemberAsync(Partnerships.PartnershipType partnershipType, BungieMembershipType membershipType, long membershipId);
	}

	partial interface IBungieClient
	{
		ICommunityContentClient CommunityContent { get; }
	}

	partial class BungieClient : ICommunityContentClient
	{
		public ICommunityContentClient CommunityContent => this;


		Forum.PostSearchResponse ICommunityContentClient.GetCommunityContent(Forum.CommunityContentSortMode sort, Forum.ForumTopicsCategoryFiltersEnum mediaFilter, int page) => CommunityContent.GetCommunityContentAsync(sort, mediaFilter, page).GetAwaiter().GetResult();
		Task<Forum.PostSearchResponse> ICommunityContentClient.GetCommunityContentAsync(Forum.CommunityContentSortMode sort, Forum.ForumTopicsCategoryFiltersEnum mediaFilter, int page)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Get", ((byte)sort).ToString(), ((int)mediaFilter).ToString(), page.ToString() };
			Uri uri = GetEndpointUri(pathSegments, true, null);
			return GetEntityAsync<Forum.PostSearchResponse>(uri);
		}

		SearchResultOfCommunityLiveStatus ICommunityContentClient.GetCommunityLiveStatuses(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, uint modeHash, string streamLocale) => CommunityContent.GetCommunityLiveStatusesAsync(partnershipType, sort, page, modeHash, streamLocale).GetAwaiter().GetResult();
		Task<SearchResultOfCommunityLiveStatus> ICommunityContentClient.GetCommunityLiveStatusesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, uint modeHash, string streamLocale)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Live", "All", ((int)partnershipType).ToString(), ((int)sort).ToString(), page.ToString() };
			System.Collections.Generic.List<QueryStringItem> queryItems = new System.Collections.Generic.List<QueryStringItem>()
			{
				new QueryStringItem("modeHash", modeHash.ToString()),
				new QueryStringItem("streamLocale", (streamLocale ?? ""))
			};
			Uri uri = GetEndpointUri(pathSegments, true, queryItems);
			return GetEntityAsync<SearchResultOfCommunityLiveStatus>(uri);
		}

		SearchResultOfCommunityLiveStatus ICommunityContentClient.GetCommunityLiveStatusesForClanmates(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page) => CommunityContent.GetCommunityLiveStatusesForClanmatesAsync(partnershipType, sort, page).GetAwaiter().GetResult();
		Task<SearchResultOfCommunityLiveStatus> ICommunityContentClient.GetCommunityLiveStatusesForClanmatesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Live", "Clan", ((int)partnershipType).ToString(), ((int)sort).ToString(), page.ToString() };
			Uri uri = GetEndpointUri(pathSegments, true, null);
			return GetEntityAsync<SearchResultOfCommunityLiveStatus>(uri);
		}

		SearchResultOfCommunityLiveStatus ICommunityContentClient.GetCommunityLiveStatusesForFriends(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page) => CommunityContent.GetCommunityLiveStatusesForFriendsAsync(partnershipType, sort, page).GetAwaiter().GetResult();
		Task<SearchResultOfCommunityLiveStatus> ICommunityContentClient.GetCommunityLiveStatusesForFriendsAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Live", "Friends", ((int)partnershipType).ToString(), ((int)sort).ToString(), page.ToString() };
			Uri uri = GetEndpointUri(pathSegments, true, null);
			return GetEntityAsync<SearchResultOfCommunityLiveStatus>(uri);
		}

		SearchResultOfCommunityLiveStatus ICommunityContentClient.GetFeaturedCommunityLiveStatuses(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, string streamLocale) => CommunityContent.GetFeaturedCommunityLiveStatusesAsync(partnershipType, sort, page, streamLocale).GetAwaiter().GetResult();
		Task<SearchResultOfCommunityLiveStatus> ICommunityContentClient.GetFeaturedCommunityLiveStatusesAsync(Partnerships.PartnershipType partnershipType, Community.CommunityStatusSort sort, int page, string streamLocale)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Live", "Featured", ((int)partnershipType).ToString(), ((int)sort).ToString(), page.ToString() };
			System.Collections.Generic.List<QueryStringItem> queryItems = new System.Collections.Generic.List<QueryStringItem>()
			{
				new QueryStringItem("streamLocale", (streamLocale ?? ""))
			};
			Uri uri = GetEndpointUri(pathSegments, true, queryItems);
			return GetEntityAsync<SearchResultOfCommunityLiveStatus>(uri);
		}

		Community.CommunityLiveStatus ICommunityContentClient.GetStreamingStatusForMember(Partnerships.PartnershipType partnershipType, BungieMembershipType membershipType, long membershipId) => CommunityContent.GetStreamingStatusForMemberAsync(partnershipType, membershipType, membershipId).GetAwaiter().GetResult();
		Task<Community.CommunityLiveStatus> ICommunityContentClient.GetStreamingStatusForMemberAsync(Partnerships.PartnershipType partnershipType, BungieMembershipType membershipType, long membershipId)
		{
			string[] pathSegments = new string[] { "CommunityContent", "Live", "Users", ((int)partnershipType).ToString(), ((int)membershipType).ToString(), membershipId.ToString() };
			Uri uri = GetEndpointUri(pathSegments, true, null);
			return GetEntityAsync<Community.CommunityLiveStatus>(uri);
		}
	}
}
