//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace BungieNet.Api
{
	public interface ISocialClient
	{
		Social.Friends.BungieFriendListResponse GetFriendList();
		Task<Social.Friends.BungieFriendListResponse> GetFriendListAsync();

		Social.Friends.BungieFriendRequestListResponse GetFriendRequestList();
		Task<Social.Friends.BungieFriendRequestListResponse> GetFriendRequestListAsync();

		bool IssueFriendRequest(string membershipId);
		Task<bool> IssueFriendRequestAsync(string membershipId);

		bool AcceptFriendRequest(string membershipId);
		Task<bool> AcceptFriendRequestAsync(string membershipId);

		bool DeclineFriendRequest(string membershipId);
		Task<bool> DeclineFriendRequestAsync(string membershipId);

		bool RemoveFriend(string membershipId);
		Task<bool> RemoveFriendAsync(string membershipId);

		bool RemoveFriendRequest(string membershipId);
		Task<bool> RemoveFriendRequestAsync(string membershipId);

		Social.Friends.PlatformFriendResponse GetPlatformFriendList(Social.Friends.PlatformFriendType friendPlatform, string page);
		Task<Social.Friends.PlatformFriendResponse> GetPlatformFriendListAsync(Social.Friends.PlatformFriendType friendPlatform, string page);
	}

	partial interface IBungieClient
	{
		ISocialClient Social { get; }
	}

	partial class BungieClient : ISocialClient
	{
		public ISocialClient Social => this;


		Social.Friends.BungieFriendListResponse ISocialClient.GetFriendList() => Social.GetFriendListAsync().GetAwaiter().GetResult();
		Task<Social.Friends.BungieFriendListResponse> ISocialClient.GetFriendListAsync()
		{
			string[] pathSegments = new string[] { "Social", "Friends" };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<Social.Friends.BungieFriendListResponse>(uri);
		}

		Social.Friends.BungieFriendRequestListResponse ISocialClient.GetFriendRequestList() => Social.GetFriendRequestListAsync().GetAwaiter().GetResult();
		Task<Social.Friends.BungieFriendRequestListResponse> ISocialClient.GetFriendRequestListAsync()
		{
			string[] pathSegments = new string[] { "Social", "Friends", "Requests" };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<Social.Friends.BungieFriendRequestListResponse>(uri);
		}

		bool ISocialClient.IssueFriendRequest(string membershipId) => Social.IssueFriendRequestAsync(membershipId).GetAwaiter().GetResult();
		Task<bool> ISocialClient.IssueFriendRequestAsync(string membershipId)
		{
			if (membershipId is null)
				throw new ArgumentNullException(nameof(membershipId));
			string[] pathSegments = new string[] { "Social", "Friends", "Add", membershipId };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		bool ISocialClient.AcceptFriendRequest(string membershipId) => Social.AcceptFriendRequestAsync(membershipId).GetAwaiter().GetResult();
		Task<bool> ISocialClient.AcceptFriendRequestAsync(string membershipId)
		{
			if (membershipId is null)
				throw new ArgumentNullException(nameof(membershipId));
			string[] pathSegments = new string[] { "Social", "Friends", "Requests", "Accept", membershipId };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		bool ISocialClient.DeclineFriendRequest(string membershipId) => Social.DeclineFriendRequestAsync(membershipId).GetAwaiter().GetResult();
		Task<bool> ISocialClient.DeclineFriendRequestAsync(string membershipId)
		{
			if (membershipId is null)
				throw new ArgumentNullException(nameof(membershipId));
			string[] pathSegments = new string[] { "Social", "Friends", "Requests", "Decline", membershipId };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		bool ISocialClient.RemoveFriend(string membershipId) => Social.RemoveFriendAsync(membershipId).GetAwaiter().GetResult();
		Task<bool> ISocialClient.RemoveFriendAsync(string membershipId)
		{
			if (membershipId is null)
				throw new ArgumentNullException(nameof(membershipId));
			string[] pathSegments = new string[] { "Social", "Friends", "Remove", membershipId };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		bool ISocialClient.RemoveFriendRequest(string membershipId) => Social.RemoveFriendRequestAsync(membershipId).GetAwaiter().GetResult();
		Task<bool> ISocialClient.RemoveFriendRequestAsync(string membershipId)
		{
			if (membershipId is null)
				throw new ArgumentNullException(nameof(membershipId));
			string[] pathSegments = new string[] { "Social", "Friends", "Requests", "Remove", membershipId };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<bool>(uri);
		}

		Social.Friends.PlatformFriendResponse ISocialClient.GetPlatformFriendList(Social.Friends.PlatformFriendType friendPlatform, string page) => Social.GetPlatformFriendListAsync(friendPlatform, page).GetAwaiter().GetResult();
		Task<Social.Friends.PlatformFriendResponse> ISocialClient.GetPlatformFriendListAsync(Social.Friends.PlatformFriendType friendPlatform, string page)
		{
			if (page is null)
				throw new ArgumentNullException(nameof(page));
			string[] pathSegments = new string[] { "Social", "PlatformFriends", ((int)friendPlatform).ToString(), page };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<Social.Friends.PlatformFriendResponse>(uri);
		}
	}
}
