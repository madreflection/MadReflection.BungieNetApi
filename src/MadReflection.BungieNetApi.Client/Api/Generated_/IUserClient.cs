//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace BungieNet.Api
{
	public interface IUserClient
	{
		User.GeneralUser GetBungieNetUserById(long id);
		Task<User.GeneralUser> GetBungieNetUserByIdAsync(long id);

		System.Collections.Generic.Dictionary<BungieCredentialType, string> GetSanitizedPlatformDisplayNames(long membershipId);
		Task<System.Collections.Generic.Dictionary<BungieCredentialType, string>> GetSanitizedPlatformDisplayNamesAsync(long membershipId);

		User.Models.GetCredentialTypesForAccountResponse[] GetCredentialTypesForTargetAccount(long membershipId);
		Task<User.Models.GetCredentialTypesForAccountResponse[]> GetCredentialTypesForTargetAccountAsync(long membershipId);

		Config.UserTheme[] GetAvailableThemes();
		Task<Config.UserTheme[]> GetAvailableThemesAsync();

		User.UserMembershipData GetMembershipDataById(long membershipId, BungieMembershipType membershipType);
		Task<User.UserMembershipData> GetMembershipDataByIdAsync(long membershipId, BungieMembershipType membershipType);

		User.UserMembershipData GetMembershipDataForCurrentUser();
		Task<User.UserMembershipData> GetMembershipDataForCurrentUserAsync();

		User.HardLinkedUserMembership GetMembershipFromHardLinkedCredential(BungieCredentialType crType, string credential);
		Task<User.HardLinkedUserMembership> GetMembershipFromHardLinkedCredentialAsync(BungieCredentialType crType, string credential);

		User.UserSearchResponse SearchByGlobalNamePrefix(string displayNamePrefix, int page);
		Task<User.UserSearchResponse> SearchByGlobalNamePrefixAsync(string displayNamePrefix, int page);

		User.UserSearchResponse SearchByGlobalNamePost(User.UserSearchPrefixRequest userSearchPrefixRequest, int page);
		Task<User.UserSearchResponse> SearchByGlobalNamePostAsync(User.UserSearchPrefixRequest userSearchPrefixRequest, int page);
	}

	partial interface IBungieClient
	{
		IUserClient User { get; }
	}

	partial class BungieClient : IUserClient
	{
		public IUserClient User => this;


		User.GeneralUser IUserClient.GetBungieNetUserById(long id) => User.GetBungieNetUserByIdAsync(id).GetAwaiter().GetResult();
		Task<User.GeneralUser> IUserClient.GetBungieNetUserByIdAsync(long id)
		{
			string[] pathSegments = new string[] { "User", "GetBungieNetUserById", id.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<User.GeneralUser>(uri);
		}

		System.Collections.Generic.Dictionary<BungieCredentialType, string> IUserClient.GetSanitizedPlatformDisplayNames(long membershipId) => User.GetSanitizedPlatformDisplayNamesAsync(membershipId).GetAwaiter().GetResult();
		Task<System.Collections.Generic.Dictionary<BungieCredentialType, string>> IUserClient.GetSanitizedPlatformDisplayNamesAsync(long membershipId)
		{
			string[] pathSegments = new string[] { "User", "GetSanitizedPlatformDisplayNames", membershipId.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<System.Collections.Generic.Dictionary<BungieCredentialType, string>>(uri);
		}

		User.Models.GetCredentialTypesForAccountResponse[] IUserClient.GetCredentialTypesForTargetAccount(long membershipId) => User.GetCredentialTypesForTargetAccountAsync(membershipId).GetAwaiter().GetResult();
		Task<User.Models.GetCredentialTypesForAccountResponse[]> IUserClient.GetCredentialTypesForTargetAccountAsync(long membershipId)
		{
			string[] pathSegments = new string[] { "User", "GetCredentialTypesForTargetAccount", membershipId.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityArrayAsync<User.Models.GetCredentialTypesForAccountResponse>(uri);
		}

		Config.UserTheme[] IUserClient.GetAvailableThemes() => User.GetAvailableThemesAsync().GetAwaiter().GetResult();
		Task<Config.UserTheme[]> IUserClient.GetAvailableThemesAsync()
		{
			string[] pathSegments = new string[] { "User", "GetAvailableThemes" };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityArrayAsync<Config.UserTheme>(uri);
		}

		User.UserMembershipData IUserClient.GetMembershipDataById(long membershipId, BungieMembershipType membershipType) => User.GetMembershipDataByIdAsync(membershipId, membershipType).GetAwaiter().GetResult();
		Task<User.UserMembershipData> IUserClient.GetMembershipDataByIdAsync(long membershipId, BungieMembershipType membershipType)
		{
			string[] pathSegments = new string[] { "User", "GetMembershipsById", membershipId.ToString(), ((int)membershipType).ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<User.UserMembershipData>(uri);
		}

		User.UserMembershipData IUserClient.GetMembershipDataForCurrentUser() => User.GetMembershipDataForCurrentUserAsync().GetAwaiter().GetResult();
		Task<User.UserMembershipData> IUserClient.GetMembershipDataForCurrentUserAsync()
		{
			string[] pathSegments = new string[] { "User", "GetMembershipsForCurrentUser" };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<User.UserMembershipData>(uri);
		}

		User.HardLinkedUserMembership IUserClient.GetMembershipFromHardLinkedCredential(BungieCredentialType crType, string credential) => User.GetMembershipFromHardLinkedCredentialAsync(crType, credential).GetAwaiter().GetResult();
		Task<User.HardLinkedUserMembership> IUserClient.GetMembershipFromHardLinkedCredentialAsync(BungieCredentialType crType, string credential)
		{
			if (credential is null)
				throw new ArgumentNullException(nameof(credential));
			string[] pathSegments = new string[] { "User", "GetMembershipFromHardLinkedCredential", ((byte)crType).ToString(), credential };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<User.HardLinkedUserMembership>(uri);
		}

		User.UserSearchResponse IUserClient.SearchByGlobalNamePrefix(string displayNamePrefix, int page) => User.SearchByGlobalNamePrefixAsync(displayNamePrefix, page).GetAwaiter().GetResult();
		Task<User.UserSearchResponse> IUserClient.SearchByGlobalNamePrefixAsync(string displayNamePrefix, int page)
		{
			if (displayNamePrefix is null)
				throw new ArgumentNullException(nameof(displayNamePrefix));
			string[] pathSegments = new string[] { "User", "Search", "Prefix", displayNamePrefix, page.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return GetEntityAsync<User.UserSearchResponse>(uri);
		}

		User.UserSearchResponse IUserClient.SearchByGlobalNamePost(User.UserSearchPrefixRequest userSearchPrefixRequest, int page) => User.SearchByGlobalNamePostAsync(userSearchPrefixRequest, page).GetAwaiter().GetResult();
		Task<User.UserSearchResponse> IUserClient.SearchByGlobalNamePostAsync(User.UserSearchPrefixRequest userSearchPrefixRequest, int page)
		{
			string[] pathSegments = new string[] { "User", "Search", "GlobalName", page.ToString() };
			Uri uri = GetEndpointUri(BungieEndpointBase.Default, pathSegments, true, null);
			return PostEntityAsync<User.UserSearchPrefixRequest, User.UserSearchResponse>(uri, userSearchPrefixRequest);
		}
	}
}
